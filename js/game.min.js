"use strict"; var _extends = Object.assign || function (e) { for (var l = 1; l < arguments.length; l++) { var t = arguments[l]; for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]) } return e }, levels = [{ name: "easy", grid: 4 }, { name: "pro", grid: 5 }], currentLevel = levels[0], numCols = void 0, numRows = void 0, totalCells = void 0, cells = void 0, totalCellsOn = void 0, score = void 0, stageElement = document.getElementsByClassName("stage")[0], boardElement = document.getElementsByClassName("board")[0], dialogElement = document.getElementsByClassName("dialog")[0], currentModal = void 0; function setStage() { var e = window.innerWidth, l = window.innerHeight, t = Math.sqrt(e * e + l * l); document.documentElement.style.setProperty("--stageSize", t + "px") } var initGame = function () { initLevel(currentLevel); for (var e = 0; e < totalCells; e++)cells[e] = { element: document.getElementById("cell" + e), order: e }, cells[e].element.addEventListener("click", cellClick, !1); resetGame(), modalHide() }, initLevel = function (e) { numCols = e.grid, numRows = e.grid, totalCells = numCols * numRows, cells = [numRows], stageElement && stageElement.classList.remove("spinning"), hideAllCells() }, resetGame = function () { score = 0, updateScore(0); for (var e = 0; e < totalCells; e++)cells[e].element.checked = !1 }, hideAllCells = function () { document.documentElement.style.setProperty("--gridSize", currentLevel.grid); for (var e = document.getElementsByClassName("cell"), l = 0; l < e.length; l++) { e[l].classList.add("isHidden") } for (var t = 0; t < totalCells; t++) { e[t].classList.toggle("isHidden") } }, initGrid = function () { document.documentElement.style.setProperty("--gridSize", currentLevel.grid); for (var e = 0; e < cells.length; e++) { cells[e].classList.toggle("isHidden") } }; function cellClick() { var e = parseInt(this.dataset.index); toggleNeighbours(e), countTotalCells(), updateScore(++score) } var findNeighbours = function (e) { var l = { t: e < numCols ? null : e - numCols, b: e + numCols >= totalCells ? null : e + numCols, l: e % numCols == 0 ? null : e - 1, r: e % numCols == numCols - 1 ? null : e + 1 }; return _extends({}, (!!l.t || 0 === l.t) && { t: l.t }, (!!l.b || 0 === l.b) && { b: l.b }, (!!l.l || 0 === l.l) && { l: l.l }, (!!l.r || 0 === l.r) && { r: l.r }) }, toggleNeighbours = function (e) { var l = findNeighbours(e); for (var t in l) updateCheckStatus(l, t) }, countTotalCells = function () { (totalCellsOn = cells.filter(function (e) { return e.element.checked }).length) === totalCells && endGame() }, updateScore = function () { var e = arguments.length <= 0 || void 0 === arguments[0] ? 0 : arguments[0], l = document.getElementsByClassName("score")[0]; l && (l.innerHTML = e) }; function endGame() { stageElement && stageElement.classList.add("spinning"), boardElement && stageElement.classList.add("blinking"); for (var e = 0; e < totalCells; e++)cells[e].element.removeEventListener("click", cellClick); setTimeout(upgradeLevel, 5e3) } var upgradeLevel = function () { currentLevel === levels[0] && (currentLevel = levels[1]), (currentModal = document.getElementById("modal-levelUp")).classList.toggle("isHidden"), modalShow() }; function updateCheckStatus(e, l) { var t = cells[e[l]].element.checked; cells[e[l]].element.checked = !t } var modalHide = function () { if (currentModal = document.getElementsByClassName("a-swipeDown")[0]) { currentModal.classList.toggle("a-swipeDown"), currentModal.classList.add("a-swipeUp"); setTimeout(function () { dialogElement.classList.toggle("a-fadeOut"), currentModal.classList.toggle("isHidden"), currentModal.classList.remove("a-swipeUp"); setTimeout(function () { dialogElement.classList.toggle("isHidden") }, 500) }, 1e3) } }, modalShow = function () { dialogElement.classList.toggle("a-fadeOut"), dialogElement.classList.toggle("isHidden"), dialogElement.classList.toggle("a-fadeIn"), currentModal.classList.toggle("a-swipeDown") };